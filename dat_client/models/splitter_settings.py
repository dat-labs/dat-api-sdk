# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from dat_client.models.split_by_character_recursiverly_settings import SplitByCharacterRecursiverlySettings
from dat_client.models.split_by_character_settings import SplitByCharacterSettings
from dat_client.models.split_by_html_header_settings import SplitByHtmlHeaderSettings
from dat_client.models.split_by_markdown_settings import SplitByMarkdownSettings
from dat_client.models.split_by_tokens_settings import SplitByTokensSettings
from dat_client.models.split_code_settings import SplitCodeSettings
from dat_client.models.split_json_recursively_settings import SplitJsonRecursivelySettings
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

SPLITTERSETTINGS_ANY_OF_SCHEMAS = ["SplitByCharacterRecursiverlySettings", "SplitByCharacterSettings", "SplitByHtmlHeaderSettings", "SplitByMarkdownSettings", "SplitByTokensSettings", "SplitCodeSettings", "SplitJsonRecursivelySettings"]

class SplitterSettings(BaseModel):
    """
    Splitter settings.
    """

    # data type: SplitByHtmlHeaderSettings
    anyof_schema_1_validator: Optional[SplitByHtmlHeaderSettings] = None
    # data type: SplitByCharacterSettings
    anyof_schema_2_validator: Optional[SplitByCharacterSettings] = None
    # data type: SplitCodeSettings
    anyof_schema_3_validator: Optional[SplitCodeSettings] = None
    # data type: SplitByMarkdownSettings
    anyof_schema_4_validator: Optional[SplitByMarkdownSettings] = None
    # data type: SplitJsonRecursivelySettings
    anyof_schema_5_validator: Optional[SplitJsonRecursivelySettings] = None
    # data type: SplitByCharacterRecursiverlySettings
    anyof_schema_6_validator: Optional[SplitByCharacterRecursiverlySettings] = None
    # data type: SplitByTokensSettings
    anyof_schema_7_validator: Optional[SplitByTokensSettings] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[SplitByCharacterRecursiverlySettings, SplitByCharacterSettings, SplitByHtmlHeaderSettings, SplitByMarkdownSettings, SplitByTokensSettings, SplitCodeSettings, SplitJsonRecursivelySettings]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "SplitByCharacterRecursiverlySettings", "SplitByCharacterSettings", "SplitByHtmlHeaderSettings", "SplitByMarkdownSettings", "SplitByTokensSettings", "SplitCodeSettings", "SplitJsonRecursivelySettings" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        if v is None:
            return v

        instance = SplitterSettings.model_construct()
        error_messages = []
        # validate data type: SplitByHtmlHeaderSettings
        if not isinstance(v, SplitByHtmlHeaderSettings):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SplitByHtmlHeaderSettings`")
        else:
            return v

        # validate data type: SplitByCharacterSettings
        if not isinstance(v, SplitByCharacterSettings):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SplitByCharacterSettings`")
        else:
            return v

        # validate data type: SplitCodeSettings
        if not isinstance(v, SplitCodeSettings):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SplitCodeSettings`")
        else:
            return v

        # validate data type: SplitByMarkdownSettings
        if not isinstance(v, SplitByMarkdownSettings):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SplitByMarkdownSettings`")
        else:
            return v

        # validate data type: SplitJsonRecursivelySettings
        if not isinstance(v, SplitJsonRecursivelySettings):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SplitJsonRecursivelySettings`")
        else:
            return v

        # validate data type: SplitByCharacterRecursiverlySettings
        if not isinstance(v, SplitByCharacterRecursiverlySettings):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SplitByCharacterRecursiverlySettings`")
        else:
            return v

        # validate data type: SplitByTokensSettings
        if not isinstance(v, SplitByTokensSettings):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SplitByTokensSettings`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in SplitterSettings with anyOf schemas: SplitByCharacterRecursiverlySettings, SplitByCharacterSettings, SplitByHtmlHeaderSettings, SplitByMarkdownSettings, SplitByTokensSettings, SplitCodeSettings, SplitJsonRecursivelySettings. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        if json_str is None:
            return instance

        error_messages = []
        # anyof_schema_1_validator: Optional[SplitByHtmlHeaderSettings] = None
        try:
            instance.actual_instance = SplitByHtmlHeaderSettings.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[SplitByCharacterSettings] = None
        try:
            instance.actual_instance = SplitByCharacterSettings.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[SplitCodeSettings] = None
        try:
            instance.actual_instance = SplitCodeSettings.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[SplitByMarkdownSettings] = None
        try:
            instance.actual_instance = SplitByMarkdownSettings.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[SplitJsonRecursivelySettings] = None
        try:
            instance.actual_instance = SplitJsonRecursivelySettings.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[SplitByCharacterRecursiverlySettings] = None
        try:
            instance.actual_instance = SplitByCharacterRecursiverlySettings.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[SplitByTokensSettings] = None
        try:
            instance.actual_instance = SplitByTokensSettings.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SplitterSettings with anyOf schemas: SplitByCharacterRecursiverlySettings, SplitByCharacterSettings, SplitByHtmlHeaderSettings, SplitByMarkdownSettings, SplitByTokensSettings, SplitCodeSettings, SplitJsonRecursivelySettings. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], SplitByCharacterRecursiverlySettings, SplitByCharacterSettings, SplitByHtmlHeaderSettings, SplitByMarkdownSettings, SplitByTokensSettings, SplitCodeSettings, SplitJsonRecursivelySettings]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


