# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from dat_client.models.dat_message_catalog import DatMessageCatalog
from dat_client.models.dat_message_connection_status import DatMessageConnectionStatus
from dat_client.models.dat_message_log import DatMessageLog
from dat_client.models.dat_message_record import DatMessageRecord
from dat_client.models.dat_message_spec import DatMessageSpec
from dat_client.models.dat_message_state import DatMessageState
from dat_client.models.type import Type
from typing import Optional, Set
from typing_extensions import Self

class DatMessage(BaseModel):
    """
    DatMessage
    """ # noqa: E501
    type: Type = Field(description="Message type")
    log: Optional[DatMessageLog] = None
    spec: Optional[DatMessageSpec] = None
    connection_status: Optional[DatMessageConnectionStatus] = Field(default=None, alias="connectionStatus")
    catalog: Optional[DatMessageCatalog] = None
    record: Optional[DatMessageRecord] = None
    state: Optional[DatMessageState] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["type", "log", "spec", "connectionStatus", "catalog", "record", "state"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of log
        if self.log:
            _dict['log'] = self.log.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spec
        if self.spec:
            _dict['spec'] = self.spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of connection_status
        if self.connection_status:
            _dict['connectionStatus'] = self.connection_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of catalog
        if self.catalog:
            _dict['catalog'] = self.catalog.to_dict()
        # override the default output from pydantic by calling `to_dict()` of record
        if self.record:
            _dict['record'] = self.record.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "log": DatMessageLog.from_dict(obj["log"]) if obj.get("log") is not None else None,
            "spec": DatMessageSpec.from_dict(obj["spec"]) if obj.get("spec") is not None else None,
            "connectionStatus": DatMessageConnectionStatus.from_dict(obj["connectionStatus"]) if obj.get("connectionStatus") is not None else None,
            "catalog": DatMessageCatalog.from_dict(obj["catalog"]) if obj.get("catalog") is not None else None,
            "record": DatMessageRecord.from_dict(obj["record"]) if obj.get("record") is not None else None,
            "state": DatMessageState.from_dict(obj["state"]) if obj.get("state") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


